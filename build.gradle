plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2021.2.2"
    id "org.hidetake.ssh" version "2.10.1"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

/* Declare the RoboRIO host for SSH access */
remotes {
    roboRio {
        host = '10.60.90.2'
        user = 'admin'
    }
}

/* Deploy the default configuration manually. */
task deployConfig() {
    doLast {
        ssh.run {
            session(remotes.roboRio) {
                put from: "${projectDir}/src/main/deploy/config.default.prop", into: '/home/lvuser/deploy/config.prop'
            }
        }
        println "Pushed configuration file."
    }
}

def ROBOT_MAIN_CLASS = "frc.robot.Robot"

deploy {
    targets {
        roboRIO("roborio") {
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            debug = frc.getDebugOrDefault(false)
        }
        fileTreeArtifact('frcStaticFileDeploy') {
            files = fileTree(dir: 'src/main/deploy')
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

def includeDesktopSupport = false

dependencies {
    /* WPILib Dependencies, don't modify these. */
    implementation wpi.deps.wpilib()
    nativeZip wpi.deps.wpilibJni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.wpilibJni(wpi.platforms.desktop)


    implementation wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

    testImplementation 'junit:junit:4.12'

    simulation wpi.deps.sim.gui(wpi.platforms.desktop, false)
    simulation wpi.deps.sim.driverstation(wpi.platforms.desktop, false)

    /* Websocket extensions require additional configuration. */
    // simulation wpi.deps.sim.ws_server(wpi.platforms.desktop, false)
    // simulation wpi.deps.sim.ws_client(wpi.platforms.desktop, false)

    /*
     * Use the flag -PuseSubmodules to activate the submodule dependencies.
     */
    if (project.hasProperty('useSubmodules')) {
        implementation project(':JLimelight')
    }
}

/* Simulation configuration (e.g. environment variables). */
sim {
    /* Sets the websocket client remote host. */
    // envVar "HALSIMWS_HOST", "10.0.0.2"
}

jar {
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}